## Stage 1 : build with maven builder image with native capabilities
FROM quay.io/quarkus/ubi-quarkus-mandrel-builder-image:jdk-21 AS build
USER root
# upx seems not to be installed in the base image
RUN curl --location --output upx-5.0.1-amd64_linux.tar.xz "https://github.com/upx/upx/releases/download/v5.0.1/upx-5.0.1-amd64_linux.tar.xz" && \
    tar -xJf upx-5.0.1-amd64_linux.tar.xz && \
    cp upx-5.0.1-amd64_linux/upx /bin/
COPY --chown=quarkus:quarkus gradlew /code/gradlew
COPY --chown=quarkus:quarkus gradle /code/gradle
COPY --chown=quarkus:quarkus build.gradle.kts /code/
COPY --chown=quarkus:quarkus settings.gradle.kts /code/
COPY --chown=quarkus:quarkus gradle.properties /code/
COPY --chown=quarkus:quarkus diktat-analysis.yaml /code/
# Required to access the hash of the current commit during build
COPY --chown=quarkus:quarkus .git /code/
USER quarkus
WORKDIR /code
COPY src /code/src
RUN \
    ./gradlew build -Dquarkus.native.enabled=true -Dquarkus.package.jar.enabled=false && \
    # Quarkus settings like "quarkus.native.compression.additional-args" seemed to have no effect - maybe we applied them
    # wrong. But its just as easy to run upx by ourselves
    upx --ultra-brute /code/build/*-runner

## Stage 2 : create the docker final image
FROM quay.io/quarkus/quarkus-distroless-image:2.0
WORKDIR /work/
COPY --from=build /code/build/*-runner /work/application
# RUN chmod 775 /work
EXPOSE 8080
USER nonroot
CMD ["./application", "-Dquarkus.http.host=0.0.0.0"]
